package postgres


{{- $modelName := pascal (trimSuffix .Table.Name "s") }}
{{- $shortVarName := toLower (sliceString $modelName 0 1) }}
{{- $isUser := eq $modelName "User" }}
{{- $isProduct := eq $modelName "Product" }}
{{- $isDiscount := eq $modelName "Discount" }}
{{- $isProductRoot := eq $modelName "ProductRoot" }}
{{- $isLoginAttempt := eq $modelName "LoginAttempt" }}
{{- $isProductVariantBridge := eq $modelName "ProductVariantBridge" }}

import (
    {{- if $isProductVariantBridge}}"fmt"{{ end }}
    "time"
    "database/sql"

	"github.com/dairycart/dairycart/api/storage"
	"github.com/dairycart/dairycart/api/storage/models"

	"github.com/Masterminds/squirrel"
)

{{- if $isProduct }}
{{ $bySKUVarName := printf "%sQueryBySKU" ( camel $modelName ) -}}
const {{ $bySKUVarName }} = `
    SELECT
    {{ $lastCol := dec (len .Table.Columns.DBNames) -}}
    {{ range $x, $col := .Table.Columns.DBNames }}    {{ $col }}{{ if ne $x $lastCol }},
    {{ end }}{{ end }}
    FROM
        {{ .Table.Name }}
    WHERE
        archived_on is null
    AND
        sku = $1
`

func (pg *postgres) Get{{ $modelName }}BySKU(db storage.Querier, sku string) (*models.{{ $modelName }}, error) {
	{{ $shortVarName }} := &models.{{ $modelName }}{}

    err := db.QueryRow({{ $bySKUVarName }}, sku).Scan({{ $lastCol := dec (len .Table.Columns.DBNames) -}}{{ range $x, $col := .Table.Columns.DBNames }}&{{ $shortVarName }}.{{ if or (eq (toLower $col) "sku") (eq (toLower $col) "upc") }}{{ toUpper $col }}{{ else }}{{ pascal $col }}{{ end }}{{ if ne $x $lastCol }}, {{ end }}{{ end }})

	return {{ $shortVarName }}, err
}

{{ $existenceBySKUQueryVarName := printf "%sWithSKUExistenceQuery" ( camel $modelName ) -}}
const {{ $existenceBySKUQueryVarName }} = `SELECT EXISTS(SELECT id FROM {{ .Table.Name }} WHERE sku = $1 and archived_on IS NULL);`

func (pg *postgres) {{ $modelName }}WithSKUExists(db storage.Querier, sku string) (bool, error) {
    var exists string

	err := db.QueryRow({{ $existenceBySKUQueryVarName }}, sku).Scan(&exists)
	if err == sql.ErrNoRows {
		return false, nil
	} else if err != nil {
		return false, err
	}

	return exists == "true", err
}
{{- end }}

{{- if $isUser }}
{{ $byUsernameVarName := printf "%sQueryByUsername" ( camel $modelName ) -}}
const {{ $byUsernameVarName }} = `
    SELECT
    {{ $lastCol := dec (len .Table.Columns.DBNames) -}}
    {{ range $x, $col := .Table.Columns.DBNames }}    {{ $col }}{{ if ne $x $lastCol }},
    {{ end }}{{ end }}
    FROM
        {{ .Table.Name }}
    WHERE
        archived_on is null
    AND
        username = $1
`

func (pg *postgres) Get{{ $modelName }}ByUsername(db storage.Querier, username string) (*models.{{ $modelName }}, error) {
	{{ $shortVarName }} := &models.{{ $modelName }}{}
    err := db.QueryRow({{ $byUsernameVarName }}, username).Scan({{ $lastCol := dec (len .Table.Columns.DBNames) -}}{{ range $x, $col := .Table.Columns.DBNames }}&{{ $shortVarName }}.{{ pascal $col }}{{ if ne $x $lastCol }}, {{ end }}{{ end }})
	return {{ $shortVarName }}, err
}

{{ $existenceByUsernameQueryVarName := printf "%sWithUsernameExistenceQuery" ( camel $modelName ) -}}
const {{ $existenceByUsernameQueryVarName }} = `SELECT EXISTS(SELECT id FROM {{ .Table.Name }} WHERE username = $1 and archived_on IS NULL);`

func (pg *postgres) {{ $modelName }}WithUsernameExists(db storage.Querier, sku string) (bool, error) {
    var exists string

	err := db.QueryRow({{ $existenceByUsernameQueryVarName }}, sku).Scan(&exists)
	if err == sql.ErrNoRows {
		return false, nil
	} else if err != nil {
		return false, err
	}

	return exists == "true", err
}
{{- end }}

{{- if $isDiscount }}
{{ $byCodeVarName := printf "%sQueryByCode" ( camel $modelName ) -}}
const {{ $byCodeVarName }} = `
    SELECT
    {{ $lastCol := dec (len .Table.Columns.DBNames) -}}
    {{ range $x, $col := .Table.Columns.DBNames }}    {{ $col }}{{ if ne $x $lastCol }},
    {{ end }}{{ end }}
    FROM
        {{ .Table.Name }}
    WHERE
        archived_on is null
    AND
        sku = $1
`

func (pg *postgres) Get{{ $modelName }}ByCode(db storage.Querier, code string) (*models.{{ $modelName }}, error) {
	{{ $shortVarName }} := &models.{{ $modelName }}{}
    err := db.QueryRow({{ $byCodeVarName }}, code).Scan({{ $lastCol := dec (len .Table.Columns.DBNames) -}}{{ range $x, $col := .Table.Columns.DBNames }}&{{ $shortVarName }}.{{ pascal $col }}{{ if ne $x $lastCol }}, {{ end }}{{ end }})
	return {{ $shortVarName }}, err
}
{{- end }}

{{- if $isProductRoot }}
{{ $existenceBySKUPrefixQueryVarName := printf "%sWithSKUPrefixExistenceQuery" ( camel $modelName ) -}}
const {{ $existenceBySKUPrefixQueryVarName }} = `SELECT EXISTS(SELECT id FROM {{ .Table.Name }} WHERE sku_prefix = $1 and archived_on IS NULL);`

func (pg *postgres) {{ $modelName }}WithSKUPrefixExists(db storage.Querier, skuPrefix string) (bool, error) {
    var exists string

	err := db.QueryRow({{ $existenceBySKUPrefixQueryVarName }}, skuPrefix).Scan(&exists)
	if err == sql.ErrNoRows {
		return false, nil
	} else if err != nil {
		return false, err
	}

	return exists == "true", err
}
{{- end }}

{{- if $isLoginAttempt }}
const {{ camel $modelName }}ExhaustionQuery = `
    SELECT count(id) FROM {{ .Table.Name }}
        WHERE username = $1
        AND created_on < NOW()
        AND successful IS false
        AND created_on > (NOW() - (15 * interval '1 minute'))
`

func (pg *postgres) {{ $modelName }}sHaveBeenExhausted(db storage.Querier, username string) (bool, error) {
	var loginCount uint64
	err := db.QueryRow({{ camel $modelName }}ExhaustionQuery, username).Scan(&loginCount)
	if err != nil {
		return false, err
	}
	return loginCount >= 10, err
}
{{- end }}

{{ $existenceQueryVarName := printf "%sExistenceQuery" ( camel $modelName ) -}}
const {{ $existenceQueryVarName }} = `SELECT EXISTS(SELECT id FROM {{ .Table.Name }} WHERE id = $1 and archived_on IS NULL);`

func (pg *postgres) {{ $modelName }}Exists(db storage.Querier, id uint64) (bool, error) {
    var exists string

	err := db.QueryRow({{ $existenceQueryVarName }}, id).Scan(&exists)
	if err == sql.ErrNoRows {
		return false, nil
	} else if err != nil {
		return false, err
	}

	return exists == "true", err
}

{{ $readQueryVarName := printf "%sSelectionQuery" ( camel $modelName ) -}}
const {{ $readQueryVarName }} = `
    SELECT
    {{ $lastCol := dec (len .Table.Columns.DBNames) -}}
    {{ range $x, $col := .Table.Columns.DBNames }}    {{ $col }}{{ if ne $x $lastCol }},
    {{ end }}{{ end }}
    FROM
        {{ .Table.Name }}
    WHERE
        archived_on is null
    AND
        id = $1
`

func (pg *postgres) Get{{ $modelName }}(db storage.Querier, id uint64) (*models.{{ $modelName }}, error) {
	{{ $shortVarName }} := &models.{{ $modelName }}{}

    err := db.QueryRow({{ $readQueryVarName }}, id).Scan({{ $lastCol := dec (len .Table.Columns.DBNames) -}}{{ range $x, $col := .Table.Columns.DBNames }}&{{ $shortVarName }}.{{ if or (eq (toLower $col) "sku") (eq (toLower $col) "upc") }}{{ toUpper $col }}{{ else if eq (toLower $col) "sku_prefix"}}SKUPrefix{{ else }}{{ pascal $col }}{{ end }}{{ if ne $x $lastCol }},{{ end }}{{ end }})

	return {{ $shortVarName }}, err
}

func build{{ $modelName }}ListRetrievalQuery(qf *models.QueryFilter) (string, []interface{}) {
	sqlBuilder := squirrel.StatementBuilder.PlaceholderFormat(squirrel.Dollar)
	queryBuilder := sqlBuilder.
		Select(
            {{ $lastCol := dec (len .Table.Columns.DBNames) -}}
            {{ range $x, $col := .Table.Columns.DBNames }}"{{ $col }}",
            {{ end }}
        ).
		From("{{ .Table.Name }}")

	query, args, _ := applyQueryFilterToQueryBuilder(queryBuilder, qf, true).ToSql()
	return query, args
}

func (pg *postgres) Get{{ $modelName }}List(db storage.Querier, qf *models.QueryFilter) ([]models.{{ $modelName }}, error) {
	var list []models.{{ $modelName }}
    query, args := build{{ $modelName }}ListRetrievalQuery(qf)

    rows, err := db.Query(query, args...)
    if err != nil {
        return nil, err
    }
    defer rows.Close()
    for rows.Next() {
        var {{ $shortVarName }} models.{{ $modelName }}
        err := rows.Scan(
            {{ $lastCol := dec (len .Table.Columns.DBNames) -}}
            {{ range $x, $col := .Table.Columns.DBNames }}&{{ $shortVarName }}.{{ if or (eq (toLower $col) "sku") (eq (toLower $col) "upc") }}{{ toUpper $col }}{{ else if eq (toLower $col) "sku_prefix"}}SKUPrefix{{ else }}{{ pascal $col }}{{ end }},
            {{ end }}
        )
        if err != nil {
            return nil, err
        }
        list = append(list, {{ $shortVarName }})
    }
    err = rows.Err()
    if err != nil {
        return nil, err
    }

	return list, err
}

func build{{ $modelName }}CountRetrievalQuery(qf *models.QueryFilter) (string, []interface{}) {
	queryBuilder := squirrel.StatementBuilder.PlaceholderFormat(squirrel.Dollar).
		Select("count(id)").
		From("{{ .Table.Name }}")

	query, args, _ := applyQueryFilterToQueryBuilder(queryBuilder, qf, false).ToSql()
	return query, args
}

func (pg *postgres) Get{{ $modelName }}Count(db storage.Querier, qf *models.QueryFilter) (uint64, error) {
	var count uint64
	query, args := build{{ $modelName }}CountRetrievalQuery(qf)
	err := db.QueryRow(query, args...).Scan(&count)
	return count, err
}

{{ $creationColumns := .Table.Columns.Names.Except (makeSlice "id" "created_on" "archived_on" "updated_on") -}}
{{ $creationQueryVarName := printf "%sCreationQuery" ( toLower $modelName ) -}}
const {{ $creationQueryVarName }} = `
    INSERT INTO {{ .Table.Name }}
        (
            {{ $lastCol := dec (len $creationColumns) -}}
            {{ range $x, $col := $creationColumns -}}
            {{ $col }}{{ if ne $lastCol $x }}, {{ end }}{{ end }}
        )
    VALUES
        (
            {{ $lastCol := dec (len $creationColumns) -}}
            {{ range $x, $col := $creationColumns -}}
            ${{ inc $x }}{{ if ne $lastCol $x }}, {{ end }}{{ end }}
        )
    RETURNING
        id, created_on{{ if $isProduct }}, available_on{{ end }};
`

func (pg *postgres) Create{{ $modelName }}(db storage.Querier, nu *models.{{ $modelName }}) (uint64, time.Time, {{- if $isProduct }}time.Time, {{ end }}error) {
    var (
        createdID uint64
        createdAt time.Time
        {{ if $isProduct -}}availableOn time.Time{{ end -}}
    )

    err := db.QueryRow({{ $creationQueryVarName }}, {{ range $x, $col := $creationColumns -}}&nu.{{- if or (eq $col "upc") (eq $col "sku") -}}{{ toUpper $col }}{{ else if eq $col "sku_prefix" }}SKUPrefix{{ else }}{{ pascal $col -}}{{ end }}{{ if ne $lastCol $x }},{{ end }}{{ end }}).Scan(&createdID, &createdAt{{- if $isProduct }}, &availableOn{{ end }})
    return createdID, createdAt, {{- if $isProduct }}availableOn, {{ end }}err
}

{{- if $isProductVariantBridge }}
func buildMulti{{ $modelName }}CreationQuery(productID uint64, optionValueIDs []uint64) (query string, values []interface{}) {
    values = append(values, productID)
    var valueString string
	for ix, id := range optionValueIDs {
		if ix == 0 {
            valueString = fmt.Sprintf("($1, $%d)", ix+2)
            values = append(values, id)
        } else {
            valueString = fmt.Sprintf(`%s
                ($1, $%d)`, valueString, ix+2)
            values = append(values, id)
        }
        if len(optionValueIDs)-1 != ix {
            valueString = fmt.Sprintf("%s,", valueString)
        }
	}

    query = fmt.Sprintf(`
        INSERT INTO {{ .Table.Name }}
            (
                product_id, product_option_value_id
            )
        VALUES
            (
                %s
            )
        RETURNING
            id, created_on;
    `, valueString)

	return query, values
}

func (pg *postgres) CreateMultiple{{ $modelName }}sForProductID(db storage.Querier, productID uint64, optionValueIDs []uint64) error {
    query, args := buildMulti{{ $modelName }}CreationQuery(productID, optionValueIDs)
    _, err := db.Exec(query, args...)
    return err
}
{{- end }}

{{ $updateColumns := .Table.Columns.Names.Except (makeSlice "id" "created_on" "archived_on") -}}
{{ $updateQueryVarName := printf "%sUpdateQuery" ( camel $modelName ) -}}
const {{ $updateQueryVarName }} = `
    UPDATE {{ toLower .Table.Name }}
    SET{{ $lastCol := dec (len $updateColumns) -}}
    {{ range $x, $col := $updateColumns }}
        {{ $col }} = {{ if eq $col "updated_on"}}NOW(){{ else }}${{ inc $x }}{{ if ne $x $lastCol }}, {{ end }}{{ end }}{{ end }}
    WHERE id = ${{ len $updateColumns }}
    RETURNING updated_on;
`

func (pg *postgres) Update{{ $modelName }}(db storage.Querier, updated *models.{{ $modelName }}) (time.Time, error) {
    var t time.Time
	err := db.QueryRow({{ $updateQueryVarName }}, {{ $lastCol := dec (len $updateColumns) -}}{{ range $x, $col := $updateColumns }}{{ if and (ne $col "updated_on") (ne $col "id")}}&updated.{{ if or (eq (toLower $col) "sku") (eq (toLower $col) "upc") }}{{ toUpper $col }}{{ else if eq (toLower $col) "sku_prefix"}}SKUPrefix{{ else }}{{ pascal $col }}{{ end }}, {{ end }}{{ end }}&updated.ID).Scan(&t)
    return t, err
}

{{ $deletionQueryVarName := printf "%sDeletionQuery" ( camel $modelName ) -}}
const {{ $deletionQueryVarName }} = `
    UPDATE {{ toLower .Table.Name }}
    SET archived_on = NOW()
    WHERE id = $1
    RETURNING archived_on
`

func (pg *postgres) Delete{{ $modelName }}(db storage.Querier, id uint64) (t time.Time, err error) {
    err = db.QueryRow({{ $deletionQueryVarName }}, id).Scan(&t)
    return t, err
}

{{ if $isProductVariantBridge }}
{{ $pvbDeletionQueryVarName := printf "%sDeletionQueryByProductID" ( camel $modelName ) -}}
const {{ $pvbDeletionQueryVarName }} = `
    UPDATE {{ .Table.Name }} SET archived_on = NOW() WHERE product_id = $1 AND archived_on IS NULL RETURNING archived_on
`

func (pg *postgres) Delete{{ $modelName }}ByProductID(db storage.Querier, productID uint64) (t time.Time, err error) {
    err = db.QueryRow({{ $pvbDeletionQueryVarName }}, productID).Scan(&t)
    return t, err
}
{{- end }}