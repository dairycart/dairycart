package api

import (
	"testing"

	"github.com/spf13/viper"
	"github.com/stretchr/testify/assert"
)

func TestLoadPlugin(t *testing.T) {
	t.Parallel()

	unempty := "not empty lol"

	t.Run("normal operation", func(_t *testing.T) {
		_t.Parallel()

		actual, err := loadPlugin("example_files/plugins/mock_db.so", "Example")

		assert.NotNil(_t, actual)
		assert.NoError(_t, err)
	})

	t.Run("with lowercased symbol name", func(_t *testing.T) {
		_t.Parallel()

		actual, err := loadPlugin("example_files/plugins/mock_db.so", "example")

		assert.NotNil(_t, actual)
		assert.NoError(_t, err)
	})

	t.Run("with empty plugin path", func(_t *testing.T) {
		_t.Parallel()

		actual, err := loadPlugin("", unempty)
		assert.Nil(_t, actual)
		assert.Error(_t, err)
	})

	t.Run("with empty symbol name", func(_t *testing.T) {
		_t.Parallel()

		actual, err := loadPlugin(unempty, "")
		assert.Nil(_t, actual)
		assert.Error(_t, err)
	})

	t.Run("with error opening plugin", func(_t *testing.T) {
		_t.Parallel()

		actual, err := loadPlugin("invalid path", unempty)
		assert.Nil(_t, actual)
		assert.Error(_t, err)
	})

	t.Run("with error looking up symbol", func(_t *testing.T) {
		_t.Parallel()

		actual, err := loadPlugin("example_files/plugins/mock_db.so", "nonexistent")

		assert.Nil(_t, actual)
		assert.Error(_t, err)
	})
}

func TestSetupCookieStorage(t *testing.T) {
	t.Parallel()

	t.Run("normal operation", func(_t *testing.T) {
		_t.Parallel()
		cs, err := setupCookieStorage("arbitrarily long secret for testing purposes")
		assert.NoError(_t, err)
		assert.NotNil(_t, cs)
	})

	t.Run("with short secret", func(_t *testing.T) {
		_t.Parallel()
		cs, err := setupCookieStorage("lol")
		assert.Error(_t, err)
		assert.Nil(_t, cs)
	})
}

func TestSetConfigDefaults(t *testing.T) {
	t.Parallel()

	t.Run("normal operation", func(_t *testing.T) {
		_t.Parallel()

		actual := viper.New()
		setConfigDefaults(actual)

		assert.Equal(_t, actual.GetInt(portKey), defaultPort, "default port should be set")
		assert.False(_t, actual.GetBool(migrateExampleDataKey), "default migrate example data value should be set")
		assert.Equal(_t, actual.GetString(domainKey),
			"http://localhost:4321", "default domain should be set")
		assert.Equal(_t, actual.GetString(databaseTypeKey), DefaultDatabaseProvider, "default database provider should be set")
		assert.Equal(_t, actual.GetString(imageStorageTypeKey), DefaultImageStorageProvider, "default _ should be set")
		assert.NotEmpty(_t, actual.GetString(secretKey), "default secret should be autogenerated.")
	})
}

func TestLoadServerConfig(t *testing.T) {
	t.Parallel()

	t.Run("normal operation", func(_t *testing.T) {
		_t.Parallel()

		actual, err := LoadServerConfig()
		assert.NoError(_t, err)

		assert.Equal(_t, actual.GetInt(portKey), defaultPort, "default port should be set")
		assert.False(_t, actual.GetBool(migrateExampleDataKey), "default migrate example data value should be set")
		assert.Equal(_t, actual.GetString(domainKey),
			"http://localhost:4321", "default domain should be set")
		assert.Equal(_t, actual.GetString(databaseTypeKey), DefaultDatabaseProvider, "default database provider should be set")
		assert.Equal(_t, actual.GetString(imageStorageTypeKey), DefaultImageStorageProvider, "default _ should be set")
		assert.NotEmpty(_t, actual.GetString(secretKey), "default secret should be autogenerated.")
	})

	t.Run("with error reading config file", func(_t *testing.T) {
		_t.Parallel()

	})
}

func TestBuildServerConfig(t *testing.T) {
	t.Parallel()

	t.Run("normal operation", func(_t *testing.T) {
		_t.Parallel()

	})

	t.Run("with error building database configuration", func(_t *testing.T) {
		_t.Parallel()

	})

	t.Run("with error loading image storage", func(_t *testing.T) {
		_t.Parallel()

	})

	t.Run("with error setting up cookie storage", func(_t *testing.T) {
		_t.Parallel()

	})
}

func TestBuildDatabaseFromConfig(t *testing.T) {
	t.Parallel()

	t.Run("normal operation", func(_t *testing.T) {
		_t.Parallel()

	})

	t.Run("with missing database key", func(_t *testing.T) {
		_t.Parallel()

	})

	t.Run("with empty connection key", func(_t *testing.T) {
		_t.Parallel()

	})

	t.Run("with missing plugin key", func(_t *testing.T) {
		_t.Parallel()

	})

	t.Run("with empty plugin key path", func(_t *testing.T) {
		_t.Parallel()

	})

	t.Run("with error loading plugin", func(_t *testing.T) {
		_t.Parallel()

	})
}

func TestLoadDatabasePlugin(t *testing.T) {
	t.Parallel()

	t.Run("normal operation", func(_t *testing.T) {
		_t.Parallel()

	})

	t.Run("with error loading plugin", func(_t *testing.T) {
		_t.Parallel()

	})

	t.Run("with error loading symbol", func(_t *testing.T) {
		_t.Parallel()

	})
}

func TestBuildImageStorerFromConfig(t *testing.T) {
	t.Parallel()

	t.Run("normal operation", func(_t *testing.T) {
		_t.Parallel()

	})

	t.Run("with missing storage key", func(_t *testing.T) {
		_t.Parallel()

	})

	t.Run("with missing plugin key", func(_t *testing.T) {
		_t.Parallel()

	})

	t.Run("with empty plugin key path", func(_t *testing.T) {
		_t.Parallel()

	})

	t.Run("with error loading plugin", func(_t *testing.T) {
		_t.Parallel()

	})
}

func TestLoadImageStoragePlugin(t *testing.T) {
	t.Parallel()

	t.Run("normal operation", func(_t *testing.T) {
		_t.Parallel()

	})

	t.Run("with error loading plugin", func(_t *testing.T) {
		_t.Parallel()

	})

	t.Run("with error loading symbol", func(_t *testing.T) {
		_t.Parallel()

	})
}

func TestInitializeServerComponents(t *testing.T) {
	t.Parallel()

	t.Run("normal use case", func(_t *testing.T) {
		_t.Parallel()
	})

	t.Run("with error initializing image storage", func(_t *testing.T) {
		_t.Parallel()

	})

	t.Run("with error migrating database", func(_t *testing.T) {
		_t.Parallel()

	})
}
