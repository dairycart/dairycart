package database

import (
	"database/sql"
	"time"

	"github.com/dairycart/dairymodels/v1"
)

// NOTE: this file "changes" a lot because Go iterates over maps in random order

// Querier is a generic interface that either *sql.DB or *sql.Tx can satisfy
type Querier interface {
    Exec(query string, args ...interface{}) (sql.Result, error)
    Query(query string, args ...interface{}) (*sql.Rows, error)
    QueryRow(query string, args ...interface{}) *sql.Row
}

type Storer interface {
    Migrate(db *sql.DB, dbURL string, loadExampleData bool) error

    {{ range .Schema.Tables }}
        {{- $modelName := pascal (trimSuffix .Name "s") -}}
        {{- $isUser := eq $modelName "User" -}}
        {{- $isProduct := eq $modelName "Product" -}}
        {{- $isWebhook := eq $modelName "Webhook" -}}
        {{- $isDiscount := eq $modelName "Discount" -}}
        {{- $isProductRoot := eq $modelName "ProductRoot" -}}
        {{- $isLoginAttempt := eq $modelName "LoginAttempt" -}}
        {{- $isProductImage := eq $modelName "ProductImage" -}}
        {{- $isProductOption := eq $modelName "ProductOption" -}}
        {{- $isProductOptionValue := eq $modelName "ProductOptionValue" -}}
        {{- $isPasswordResetToken := eq $modelName "PasswordResetToken" -}}
        {{- $isProductVariantBridge := eq $modelName "ProductVariantBridge" -}}
        // {{ pascal .Name }}
            Get{{ $modelName }}(Querier, uint64) (*models.{{ $modelName }}, error)
            Get{{ $modelName }}List(Querier, *models.QueryFilter) ([]models.{{ $modelName }}, error)
            Get{{ $modelName }}Count(Querier, *models.QueryFilter) (uint64, error)
            {{ $modelName }}Exists(Querier, uint64) (bool, error)
            Create{{ $modelName }}(Querier, *models.{{ $modelName }}) (newID uint64, createdOn time.Time, {{ if $isProduct }}availableOn time.Time, {{ end }}e error)
            Update{{ $modelName }}(Querier, *models.{{ $modelName }}) (time.Time, error)
            Delete{{ $modelName }}(Querier, uint64) (time.Time, error)
        {{- if or (or $isProductVariantBridge $isProductOptionValue) (or $isProductOption $isProduct) }}
            Archive{{ $modelName }}sWithProductRootID(Querier, uint64) (time.Time, error)
        {{- end -}}
        {{- if $isProductOption }}
            {{ $modelName }}WithNameExistsForProductRoot(Querier, string, uint64) (bool, error)
        {{- end -}}
        {{- if $isProductOptionValue }}
            {{ $modelName }}ForOptionIDExists(Querier, uint64, string) (bool, error)
            Archive{{ $modelName }}sForOption(Querier, uint64) (time.Time, error)
            Get{{ $modelName }}sForOption(Querier, uint64) ([]models.{{ $modelName }}, error)
        {{- end -}}
        {{- if $isProductRoot }}
            {{ $modelName }}WithSKUPrefixExists(Querier, string) (bool, error)
        {{- end -}}
        {{- if $isDiscount }}
            Get{{ $modelName }}ByCode(Querier, string) (*models.{{ $modelName }}, error)
        {{- end -}}
        {{- if $isProductVariantBridge }}
            Delete{{ $modelName }}ByProductID(Querier, uint64) (time.Time, error)
            CreateMultiple{{ $modelName }}sForProductID(Querier, uint64, []uint64) error
        {{- end -}}
        {{- if $isProductImage }}
            Get{{ $modelName }}sByProductID(Querier, uint64) ([]models.{{ $modelName }}, error)
            SetPrimary{{ $modelName }}ForProduct(Querier, uint64, uint64) (time.Time, error)
        {{- end -}}
        {{- if $isPasswordResetToken }}
            {{ $modelName }}ForUserIDExists(Querier, uint64) (bool, error)
            {{ $modelName }}WithTokenExists(Querier, string) (bool, error)
        {{- end -}}
        {{- if $isProduct }}
            Get{{ $modelName }}BySKU(Querier, string) (*models.{{ $modelName }}, error)
            {{ $modelName }}WithSKUExists(Querier, string) (bool, error)
        {{- end -}}
        {{- if $isUser }}
            Get{{ $modelName }}ByUsername(Querier, string) (*models.{{ $modelName }}, error)
            {{ $modelName }}WithUsernameExists(Querier, string) (bool, error)
        {{- end -}}
        {{- if or $isProduct $isProductOption }}
            Get{{ $modelName }}sByProductRootID(Querier, uint64) ([]models.{{ $modelName }}, error)
        {{- end -}}
        {{- if $isLoginAttempt }}
            {{ $modelName }}sHaveBeenExhausted(Querier, string) (bool, error)
        {{- end -}}
        {{- if $isWebhook }}
            Get{{ $modelName }}sByEventType(db Querier, eventType string) ([]models.{{ $modelName }}, error)
        {{- end -}}
        {{ "\n " }}
    {{ end -}}
}
